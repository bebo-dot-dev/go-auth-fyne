package main

import (
	"bytes"
	"context"
	"encoding/base64"
	"fmt"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/data/validation"
	"fyne.io/fyne/v2/driver/mobile"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"github.com/bebo-dot-dev/go-auth-api/client"
	"image/color"
	"image/png"
	"log"
	"net/http"
	"os"
	"strings"
)

const appIconPngBase64 = ``
const apiServerHost = `192.168.1.3:8080`

var window fyne.Window

func main() {
	thisApp := app.NewWithID("fyne authentication demo")
	thisApp.SetIcon(getStaticResource(appIconPngBase64))
	window = thisApp.NewWindow("Authentication Demo")

	form, username := getLogonForm()
	window.SetContent(form)
	window.Resize(fyne.NewSize(640, window.Canvas().Size().Height))

	window.Canvas().Focus(username)
	if device, ok := fyne.CurrentDevice().(mobile.Device); ok {
		device.ShowVirtualKeyboard()
	}

	thisApp.Settings().SetTheme(theme.DarkTheme())
	window.ShowAndRun()
}

func getStaticResource(imgData string) *fyne.StaticResource {
	rdr := base64.NewDecoder(base64.StdEncoding, strings.NewReader(imgData))
	img, err := png.Decode(rdr)
	if err != nil {
		log.Fatal(err)
	}
	buff := new(bytes.Buffer)
	err = png.Encode(buff, img)
	if err != nil {
		log.Fatal(err)
	}
	return fyne.NewStaticResource("app icon", buff.Bytes())
}

func getLogonForm() (*fyne.Container, *widget.Entry) {
	apiEndpointLabel := widget.NewLabel("Using API endpoint: " + apiServerHost)

	username := widget.NewEntry()
	username.Validator = validation.NewRegexp(`^[A-Za-z0-9_-]+$`, "username can only contain letters, numbers, '_', and '-'")
	username.SetPlaceHolder("Username")

	password := widget.NewPasswordEntry()
	password.Validator = validation.NewRegexp(`^[A-Za-z0-9_-]+$`, "password can only contain letters, numbers, '_', and '-'")
	password.SetPlaceHolder("Password")

	info := widget.NewMultiLineEntry()
	info.Wrapping = fyne.TextWrapWord
	warningIcon := widget.NewIcon(theme.WarningIcon())
	infoPanel := container.NewBorder(nil, nil, warningIcon, nil, info)
	infoPanel.Hide()

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Widget: username, HintText: "Your username"},
			{Widget: password, HintText: "Your password"},
		},
		OnCancel: func() {
			username.SetText("")
			password.SetText("")
			window.Canvas().Focus(username)
			if device, ok := fyne.CurrentDevice().(mobile.Device); ok {
				device.ShowVirtualKeyboard()
			}
			infoPanel.Hide()
			fmt.Println("Cancelled")
		},
		OnSubmit: func() {
			user, response, err := attemptAuth(username.Text, password.Text)
			handleAuthResponse(username.Text, user, response, err, info, infoPanel)
		},
	}
	
	grid := container.NewGridWithColumns(1, form, infoPanel)
	content := container.NewVBox(apiEndpointLabel, grid)

	if fyne.CurrentDevice().IsMobile() {
		return content, username
	} else {
		bottom := newBorderSpacer()
		left := newBorderSpacer()
		right := newBorderSpacer()
		return container.NewBorder(nil, bottom, left, right, content), username
	}

}

func newBorderSpacer() fyne.CanvasObject {
	rect := canvas.NewRectangle(color.Alpha{})
	rect.SetMinSize(fyne.NewSize(30, 30))
	return rect
}

func attemptAuth(username, password string) (*client.ExistingUserAccount, *http.Response, error) {
	credentials := *client.NewUserCredentials(username, password)
	configuration := client.NewConfiguration()
	configuration.Servers = client.ServerConfigurations{
		{
			URL: fmt.Sprintf("http://%s", apiServerHost),
		},
	}
	apiClient := client.NewAPIClient(configuration)
	resp, r, err := apiClient.AuthAPIApi.AuthenticateUser(context.Background()).UserCredentials(credentials).Execute()
	if err != nil {
		_, _ = fmt.Fprintf(os.Stderr, "Error when calling `AuthAPIApi.AuthenticateUser``: %v\n", err)
		_, _ = fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
		return nil, r, err
	}
	_, _ = fmt.Fprintf(os.Stdout, "Response from `AuthAPIApi.AuthenticateUser`: %v\n", resp)
	return &resp, r, nil
}

func handleAuthResponse(
	username string,
	user *client.ExistingUserAccount,
	response *http.Response,
	err error,
	info *widget.Entry,
	infoPanel *fyne.Container) {

	if err != nil {
		info.SetText(fmt.Sprintf("failed to authenticate '%s'\nerror: %v\nresponse: %v", username, err, response))
		infoPanel.Show()
	} else {
		if user.Authenticated {
			info.SetText(fmt.Sprintf("authenticated '%s'\nuserId: %v", username, user.Id))
			infoPanel.Show()

			fyne.CurrentApp().SendNotification(&fyne.Notification{
				Title:   "Auth demo",
				Content: fmt.Sprintf("authenticated '%s'!\nuserId: %v", username, user.Id),
			})
		} else {
			info.SetText(fmt.Sprintf("failed to authenticate '%s'\nresponse: %v", username, response))
			infoPanel.Show()
		}
	}
}
